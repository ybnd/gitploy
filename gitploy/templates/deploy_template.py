# Deployment file generated by gitploy $gitploy https://github.com/ybnd/gitploy

# To deploy, place the file into an empty folder and run it.
#          (on Windows, it's enough to just double-click it)

# Bootstraps a virtual environment in
environment = "$environment"
# ...or doesn't, if it says environment = ""

# Sets up a git repository for
name = "$name"
url = "$url"
version = "$version"

# Installs its dependencies in the virtual environment
# Runs the following script templates for $name:
setup_script_templates = $setup
# You can read them here: $url/tree/$version/scripts

# The result is a fully functional development environment without the hassle.


import os
import sys
from distutils.util import strtobool
import subprocess
from string import Template

install_requirements = $install_requirements
requirements_file = "$requirements_file"

check = '''$check'''
deploy_git = '''$deploy_git'''

do = strtobool(
    input(f"Deploy {name} from {url} ({version}) into {os.getcwd()}? (y/n) \n")
)

if do:
    if check:
        # Run check script
        subprocess.check_call(['python', '-c', check])

    if environment:
        print(f"Creating a virtual environment in {environment}")
        subprocess.check_call(['python', '-m', 'venv', environment])

        if os.path.isdir(os.path.join(environment, 'bin')):
            executable = os.path.join(environment, 'bin/python')
        elif os.path.isdir(os.path.join(environment, 'Scripts')):
            executable = os.path.join(environment, 'Scripts/python')
        else:
            raise OSError('The virtual environment has an unexpected format.')
    else:
        executable = sys.executable

    # Install gitploy requirements
    pip_install = [executable, '-m', 'pip', 'install']
    subprocess.check_call(pip_install + ['--upgrade', 'pip'])
    subprocess.check_call(pip_install + [*install_requirements])

    # Set up .git repository
    subprocess.check_call([executable, '-c', deploy_git])

    # Install project requirements
    subprocess.check_call(pip_install + ['-r', requirements_file])

    # Run setup scripts
    for script_template in setup_script_templates:
        with open(script_template, 'r') as f:
            script = Template(f.read()).substitute(
                name=name, url=url, version=version, environment=environment
            )
            subprocess.check_call([executable, '-c', script])

    # Remove this script
    os.remove(__file__)

    input('\nDone.')
